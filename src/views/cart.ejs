<%- include('./header', { headerName: title }); -%>

    <script
        src="https://www.paypal.com/sdk/js?client-id=AXbm9w5eTzhCPtbsh9v99N_jzrXkuXQDfXL8bq4Wa7xR-y5dMTz4DLnFGmn5DiL4VVCfTgwNJY2XT9xH&currency=USD&intent=capture">
        </script>
    <main>

        <div class="container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">SNEAKERS</a></li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <%= title%>
                    </li>
                </ol>
            </nav>
        </div>

        <div class="album py-5 bg-light">
            <div class="container">

                <div id="divContentProducts" class="row justify-content-center ">
                </div>


            </div>
        </div>

        <script>

            $(document).ready(function () {

                fntShowCart();

            });

            function fntShowCart() {

                let objCart = JSON.parse(localStorage.getItem('cart-items'));

                if (objCart != null && objCart.length > 0) {

                    let strIdProduct = '';
                    objCart.map(row => {
                        strIdProduct += (strIdProduct == '' ? '' : ',') + row.idProduct
                    });

                    let total = 0;

                    var requestOptions = {
                        method: 'GET'
                    };

                    $("#divContentProducts").html('');
                    fetch("/api/products/cart/" + strIdProduct, requestOptions)
                        .then(response => response.text())
                        .then(result => {

                            arrProducts = JSON.parse(result);

                            arrProducts.map(row => {

                                let arrInCart = objCart.find(rowCart => rowCart.idProduct == row.id);

                                let sinTotalRow = row.price * arrInCart.quantity;

                                total += sinTotalRow;

                                $("#divContentProducts").append(`
                                <div class="col-10">

                                    <div class="card mb-3" style="max-width: 100%;">
                                        <div class="row g-0">
                                            <div class="col-md-4">
                                                <img src="${row.image_url}"
                                                    class="img-fluid rounded-start" alt="...">
                                            </div>
                                            <div class="col-md-8">
                                                <div class="card-body">
                                                    <h3 class="card-subtitle mb-2 text-end ">
                                                        <span onclick="fntDeleteProductCart('${row.id}');" class="badge bg-danger" style="cursor: pointer;">X</span>
                                                    </h3>
                                                    <h6 class="card-subtitle mb-2 text-muted">${row.brand}</h6>
                                                    <h5 class="card-title">${row.name}</h5>
                                                    <h6 class="card-subtitle mb-2 text-muted">Size: ${arrInCart.size}</h6>
                                                    <h6 class="card-subtitle mb-2 text-muted">Quantity: ${arrInCart.quantity}</h6>
                                                    <h3 class="card-subtitle mb-2 text-end ">
                                                        <span class="badge bg-success">${row.currency} ${new Intl.NumberFormat({}).format(sinTotalRow)}</span>
                                                    </h3>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    </div>
                                `);

                            });

                            fntDrawTotal(total);



                        })
                        .catch(error => console.log('error', error));

                    /*
                    

                    */
                }
                else{

                    location.href = '/';
                }


            }

            function transactionCreate() {
                console.log('transactionCreate');
            }

            function transactionUpdate() {
                console.log('transactionUpdate');
            }

            function modalUpdate() {
                console.log('modalUpdate')
            }

            function fntDeleteProductCart(idProduct) {

                let objCart = JSON.parse(localStorage.getItem('cart-items'));

                let arrNewCart = [];
                objCart.map(row => {

                    console.log(row);
                    if (row.idProduct != idProduct) {
                        arrNewCart.push(row);
                    }
                });


                localStorage.setItem('cart-items', JSON.stringify(arrNewCart));

                fntShowCart();

            }

            function fntDrawTotal(total) {

                $("#divContentProducts").append(`
                                <div class="col-10">

                                    <div class="card mb-3" style="max-width: 100%;">
                                        <div class="row g-0 justify-content-end">

                                            <div class="col-md-8">
                                                <div class="card-body">
                                                    <h3 class="card-subtitle mb-2 text-end ">
                                                        <span class="badge bg-success">Total:</span>
                                                        <span class="badge bg-success">Q ${new Intl.NumberFormat({}).format(total)}</span>
                                                    </h3>
                                                    <h3 class="card-subtitle mb-2 text-end ">

                                                        <span class="badge">
                                                            <div id="paypal-button-container"
                                                                style="width: 80%; height: 1rem; font-weight: 900; ">
                                                            </div>
                                                        </span>



                                                    </h3>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            `);


                const fundingSources = [
                    paypal.FUNDING.PAYPAL
                ]

                for (const fundingSource of fundingSources) {
                    const paypalButtonsComponent = paypal.Buttons({
                        fundingSource: fundingSource,

                        // optional styling for buttons
                        // https://developer.paypal.com/docs/checkout/standard/customize/buttons-style-guide/
                        style: {
                            layout: 'horizontal',
                            shape: 'rect',
                            color: 'white',
                            height: 48,
                        },

                        // set up the transaction
                        createOrder: (data, actions) => {
                            // pass in any options from the v2 orders create call:
                            // https://developer.paypal.com/api/orders/v2/#orders-create-request-body

                            const createOrderPayload = {
                                purchase_units: [{
                                    amount: {
                                        value: total,
                                    },
                                },],
                            }

                            console.log('Transaction created!')
                            return actions.order.create(createOrderPayload);
                        },

                        // finalize the transaction 
                        onApprove: (data, actions) => {
                            const captureOrderHandler = (details) => {
                                const payerName = details.payer.name.given_name
                                alert('Transaction completed!')

                            }

                            return actions.order.capture().then(captureOrderHandler)
                        },
                        //si cancela
                        onCancel: function (data) {
                            console.log('Transaction cancel!')
                        },

                        // handle unrecoverable errors
                        onError: (err) => {
                            console.error(
                                err,
                            )
                            console.log('Transaction error!')
                        },
                    })

                    if (paypalButtonsComponent.isEligible()) {
                        paypalButtonsComponent
                            .render('#paypal-button-container')
                            .catch((err) => {
                                console.error('PayPal Buttons failed to render')
                            })
                    } else {
                        console.log('The funding source is ineligible')
                    }
                }

            }

        </script>

    </main>

    <%- include('./footer', { page: 'index' }); -%>